{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///home/impact/Documents/hanime-scraper/app/lib/hanime-api.ts"],"sourcesContent":["// app/lib/hanime-api.ts\nimport crypto from 'crypto';\n\nexport class HanimeAPI {\n  private readonly BASE_URL = \"https://hanime.tv\";\n  private readonly SEARCH_URL = \"https://search.htv-services.com\";\n  private readonly API_URL = \"https://hanime.tv/api/v8\";\n\n  private getHeaders() {\n    return {\n      'X-Signature-Version': 'web2',\n      'X-Signature': crypto.randomBytes(32).toString('hex'),\n      'X-Time': Math.floor(Date.now() / 1000).toString(),\n      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n      'Accept': 'application/json',\n      'Referer': 'https://hanime.tv/',\n    };\n  }\n\n  async getTrending(time: string = 'week', page: number = 0) {\n    const url = `${this.API_URL}/browse-trending?time=${time}&page=${page}&order_by=views&ordering=desc`;\n    const response = await fetch(url, { headers: this.getHeaders() });\n    \n    if (!response.ok) throw new Error(`API error: ${response.status}`);\n    \n    const data = await response.json();\n    return {\n      results: data.hentai_videos.map((video: any) => ({\n        id: video.id,\n        name: video.name,\n        slug: video.slug,\n        cover_url: video.cover_url,\n        poster_url: video.poster_url,\n        views: video.views,\n        likes: video.likes,\n        dislikes: video.dislikes,\n        rating: video.rating,\n        brand: video.brand,\n        duration: video.duration_in_ms,\n        is_censored: video.is_censored,\n        created_at: video.created_at,\n        tags: video.tags || []\n      })),\n      page,\n      has_next: data.hentai_videos.length > 0\n    };\n  }\n\n  async search(query: string, page: number = 0) {\n    const response = await fetch(this.SEARCH_URL, {\n      method: \"POST\",\n      headers: { \n        \"Content-Type\": \"application/json\",\n        ...this.getHeaders()\n      },\n      body: JSON.stringify({\n        blacklist: [],\n        brands: [],\n        order_by: \"created_at_unix\",\n        page,\n        tags: [],\n        search_text: query,\n        tags_mode: \"AND\",\n      }),\n    });\n\n    if (!response.ok) throw new Error(`Search error: ${response.status}`);\n\n    const data = await response.json();\n    const results = JSON.parse(data.hits || '[]');\n\n    return {\n      results: results.map((video: any) => ({\n        id: video.id,\n        name: video.name,\n        slug: video.slug,\n        cover_url: video.cover_url,\n        poster_url: video.poster_url,\n        views: video.views,\n        likes: video.likes,\n        dislikes: video.dislikes,\n        brand: video.brand,\n        duration: video.duration_in_ms,\n        is_censored: video.is_censored,\n        tags: video.tags || []\n      })),\n      total: data.nbHits,\n      pages: data.nbPages,\n      page\n    };\n  }\n\n  async getVideo(slug: string) {\n    // First, get the video ID from the slug\n    const videoUrl = `${this.API_URL}/video?id=${slug}`;\n    const response = await fetch(videoUrl, { headers: this.getHeaders() });\n    \n    if (!response.ok) throw new Error(`Video error: ${response.status}`);\n    \n    const data = await response.json();\n    const video = data.hentai_video;\n    const manifest = data.videos_manifest;\n\n    return {\n      id: video.id,\n      name: video.name,\n      slug: video.slug,\n      description: video.description,\n      poster_url: video.poster_url,\n      cover_url: video.cover_url,\n      views: video.views,\n      likes: video.likes,\n      dislikes: video.dislikes,\n      downloads: video.downloads,\n      brand: video.brand,\n      duration: video.duration_in_ms,\n      is_censored: video.is_censored,\n      created_at: video.created_at,\n      released_at: video.released_at,\n      tags: data.hentai_tags?.map((tag: any) => ({\n        name: tag.text,\n        id: tag.id,\n        count: tag.count\n      })) || [],\n      streams: manifest?.servers?.[0]?.streams?.map((stream: any) => ({\n        width: stream.width,\n        height: stream.height,\n        size_mbs: stream.filesize_mbs,\n        url: stream.url,\n        extension: stream.extension,\n        duration_ms: stream.duration_in_ms\n      })) || [],\n      episodes: data.hentai_franchise_hentai_videos?.map((ep: any) => ({\n        id: ep.id,\n        name: ep.name,\n        slug: ep.slug,\n        cover_url: ep.cover_url,\n        views: ep.views,\n        created_at: ep.created_at\n      })) || []\n    };\n  }\n\n// app/lib/hanime-api.ts - Update the getVideoStreams method\nasync getVideoStreams(slug: string) {\n  // Try the newer API endpoint first\n  const url = `${this.API_URL}/video?id=${slug}`;\n  \n  try {\n    const response = await fetch(url, { headers: this.getHeaders() });\n    \n    if (!response.ok) throw new Error(`API error: ${response.status}`);\n    \n    const data = await response.json();\n    const manifest = data.videos_manifest;\n    \n    if (manifest?.servers) {\n      const streams = manifest.servers\n        .flatMap((server: any) => server.streams || [])\n        .filter((stream: any) => stream.url)\n        .map((stream: any) => ({\n          id: stream.id,\n          server_id: stream.server_id, \n          url: stream.url,\n          width: stream.width,\n          height: stream.height,\n          quality: `${stream.height}p`,\n          size_mbs: stream.filesize_mbs,\n          duration_ms: stream.duration_in_ms,\n          extension: stream.extension\n        }));\n      \n      return streams;\n    }\n  } catch (error) {\n    console.error('Primary streams endpoint failed:', error);\n  }\n  \n  // Fallback to the alternative endpoint\n  const fallbackUrl = `${this.BASE_URL}/rapi/v7/videos_manifests/${slug}`;\n  const response = await fetch(fallbackUrl, { headers: this.getHeaders() });\n  \n  if (!response.ok) throw new Error(`Streams error: ${response.status}`);\n  \n  const json = await response.json();\n  const manifest = json.videos_manifest;\n  \n  if (!manifest?.servers) throw new Error('No servers found');\n  \n  const streams = manifest.servers\n    .flatMap((server: any) => server.streams || [])\n    .filter((stream: any) => stream.url)\n    .map((stream: any) => ({\n      id: stream.id,\n      server_id: stream.server_id,\n      url: stream.url,\n      width: stream.width,\n      height: stream.height, \n      quality: `${stream.height}p`,\n      size_mbs: stream.filesize_mbs,\n      duration_ms: stream.duration_in_ms,\n      extension: stream.extension\n    }));\n  \n  return streams;\n}\n\n  async getTags() {\n    const url = `${this.API_URL}/browse`;\n    const response = await fetch(url, { headers: this.getHeaders() });\n    \n    if (!response.ok) throw new Error(`Tags error: ${response.status}`);\n    \n    const data = await response.json();\n    return data.hentai_tags?.map((tag: any) => ({\n      id: tag.id,\n      name: tag.text,\n      count: tag.count,\n      url: `/tags/${tag.text}`\n    })) || [];\n  }\n\n  async getVideosByTag(tag: string, page: number = 0) {\n    const url = `${this.API_URL}/browse/hentai-tags/${encodeURIComponent(tag)}?page=${page}&order_by=views&ordering=desc`;\n    const response = await fetch(url, { headers: this.getHeaders() });\n    \n    if (!response.ok) throw new Error(`Tag videos error: ${response.status}`);\n    \n    const data = await response.json();\n    return {\n      results: data.hentai_videos.map((video: any) => ({\n        id: video.id,\n        name: video.name,\n        slug: video.slug,\n        cover_url: video.cover_url,\n        poster_url: video.poster_url,\n        views: video.views,\n        brand: video.brand,\n        duration: video.duration_in_ms,\n        is_censored: video.is_censored,\n        tags: video.tags || []\n      })),\n      page,\n      has_next: data.hentai_videos.length > 0\n    };\n  }\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 300, "column": 0}, "map": {"version":3,"sources":["file:///home/impact/Documents/hanime-scraper/app/api/hanime/tags/%5Btag%5D/route.ts"],"sourcesContent":["// app/api/hanime/tags/[tag]/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { HanimeAPI } from '@/app/lib/hanime-api';\n\nconst api = new HanimeAPI();\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ tag: string }> }\n) {\n  try {\n    const { tag } = await params; // ← And here!\n    const searchParams = request.nextUrl.searchParams;\n    const page = parseInt(searchParams.get('page') || '0');\n    \n    const data = await api.getVideosByTag(tag, page);\n    \n    return NextResponse.json(data);\n  } catch (error: any) {\n    console.error('[Tag Videos API] Error:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch tag videos', details: error.message },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"AAAA,qCAAqC;;;;AACrC;AACA;;;AAEA,MAAM,MAAM,IAAI,6HAAA,CAAA,YAAS;AAElB,eAAe,IACpB,OAAoB,EACpB,EAAE,MAAM,EAAwC;IAEhD,IAAI;QACF,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,QAAQ,cAAc;QAC5C,MAAM,eAAe,QAAQ,OAAO,CAAC,YAAY;QACjD,MAAM,OAAO,SAAS,aAAa,GAAG,CAAC,WAAW;QAElD,MAAM,OAAO,MAAM,IAAI,cAAc,CAAC,KAAK;QAE3C,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;YAA8B,SAAS,MAAM,OAAO;QAAC,GAC9D;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}