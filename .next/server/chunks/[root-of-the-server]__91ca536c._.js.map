{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///home/impact/Documents/hanime-scraper/app/api/nsfw/search/%5Btag%5D/route.ts"],"sourcesContent":["// app/api/nsfw/search/[tag]/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport axios from 'axios';\n\n// Global cache objects (shared across all route files)\nconst nsfwTokenCache = { token: null as string | null, expires: 0 };\nconst nsfwContentCache = new Map();\n\nasync function getNSFWAuthToken() {\n  if (nsfwTokenCache.token && Date.now() < nsfwTokenCache.expires) {\n    return nsfwTokenCache.token;\n  }\n  try {\n    const res = await axios.get('https://api.redgifs.com/v2/auth/temporary', {\n      timeout: 10000,\n      headers: {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n      }\n    });\n    nsfwTokenCache.token = res.data.token;\n    nsfwTokenCache.expires = Date.now() + (23 * 60 * 60 * 1000); // 23 hours to be safe\n    return nsfwTokenCache.token;\n  } catch (error) {\n    console.error('NSFW Auth error:', error);\n    return null;\n  }\n}\n\nfunction cacheContent(key: string, data: any, ttl = 5 * 60 * 1000) {\n  nsfwContentCache.set(key, { data, expires: Date.now() + ttl });\n  // Clean up expired entries\n  setTimeout(() => {\n    const entry = nsfwContentCache.get(key);\n    if (entry && Date.now() > entry.expires) {\n      nsfwContentCache.delete(key);\n    }\n  }, ttl);\n}\n\nfunction getCachedContent(key: string) {\n  const entry = nsfwContentCache.get(key);\n  if (entry && Date.now() < entry.expires) {\n    return entry.data;\n  }\n  nsfwContentCache.delete(key);\n  return null;\n}\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ tag: string }> }\n) {\n  try {\n    const { tag } = await params;\n    const { searchParams } = new URL(request.url);\n    const count = Math.min(parseInt(searchParams.get('count') || '20'), 80); // RedGifs limit\n    const order = searchParams.get('order') || 'trending';\n    const offset = Math.min(parseInt(searchParams.get('offset') || '0'), 1000);\n    \n    const cacheKey = `nsfw_search_${tag}_${count}_${order}_${offset}`;\n    const cached = getCachedContent(cacheKey);\n    if (cached) {\n      return NextResponse.json(cached);\n    }\n\n    const token = await getNSFWAuthToken();\n    if (!token) {\n      return NextResponse.json({ \n        success: false, \n        error: 'Authentication failed',\n        videos: []\n      }, { status: 200 }); // Return 200 with empty data instead of 500\n    }\n\n    const response = await axios.get('https://api.redgifs.com/v2/gifs/search', {\n      headers: { \n        Authorization: `Bearer ${token}`,\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n      },\n      params: { \n        search_text: decodeURIComponent(tag), \n        count, \n        order,\n        page: Math.floor(offset / count) + 1\n      },\n      timeout: 15000\n    });\n\n    const gifs = response.data?.gifs || [];\n    const data = {\n      success: true,\n      count: gifs.length,\n      videos: gifs.map((gif: any) => ({\n        id: gif.id,\n        title: gif.title || '',\n        urls: {\n          hd: gif.urls?.hd,\n          sd: gif.urls?.sd || gif.urls?.mobile\n        },\n        tags: gif.tags || [],\n        duration: gif.duration || 0,\n        thumbnail: gif.urls?.thumbnail || gif.urls?.poster\n      })),\n      nextPage: gifs.length >= count ? `${offset + count}` : null\n    };\n\n    cacheContent(cacheKey, data, 3 * 60 * 1000); // 3 minutes cache\n    return NextResponse.json(data);\n    \n  } catch (error: any) {\n    console.error('NSFW Search error:', {\n      message: error.message,\n      status: error.response?.status,\n      data: error.response?.data\n    });\n    \n    // Return a valid response instead of throwing\n    return NextResponse.json({ \n      success: false, \n      error: 'Search temporarily unavailable',\n      videos: [],\n      count: 0\n    }, { status: 200 });\n  }\n}\n"],"names":[],"mappings":"AAAA,qCAAqC;;;;AACrC;AACA;;;AAEA,uDAAuD;AACvD,MAAM,iBAAiB;IAAE,OAAO;IAAuB,SAAS;AAAE;AAClE,MAAM,mBAAmB,IAAI;AAE7B,eAAe;IACb,IAAI,eAAe,KAAK,IAAI,KAAK,GAAG,KAAK,eAAe,OAAO,EAAE;QAC/D,OAAO,eAAe,KAAK;IAC7B;IACA,IAAI;QACF,MAAM,MAAM,MAAM,0LAAA,CAAA,UAAK,CAAC,GAAG,CAAC,6CAA6C;YACvE,SAAS;YACT,SAAS;gBACP,cAAc;YAChB;QACF;QACA,eAAe,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK;QACrC,eAAe,OAAO,GAAG,KAAK,GAAG,KAAM,KAAK,KAAK,KAAK,MAAO,sBAAsB;QACnF,OAAO,eAAe,KAAK;IAC7B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oBAAoB;QAClC,OAAO;IACT;AACF;AAEA,SAAS,aAAa,GAAW,EAAE,IAAS,EAAE,MAAM,IAAI,KAAK,IAAI;IAC/D,iBAAiB,GAAG,CAAC,KAAK;QAAE;QAAM,SAAS,KAAK,GAAG,KAAK;IAAI;IAC5D,2BAA2B;IAC3B,WAAW;QACT,MAAM,QAAQ,iBAAiB,GAAG,CAAC;QACnC,IAAI,SAAS,KAAK,GAAG,KAAK,MAAM,OAAO,EAAE;YACvC,iBAAiB,MAAM,CAAC;QAC1B;IACF,GAAG;AACL;AAEA,SAAS,iBAAiB,GAAW;IACnC,MAAM,QAAQ,iBAAiB,GAAG,CAAC;IACnC,IAAI,SAAS,KAAK,GAAG,KAAK,MAAM,OAAO,EAAE;QACvC,OAAO,MAAM,IAAI;IACnB;IACA,iBAAiB,MAAM,CAAC;IACxB,OAAO;AACT;AAEO,eAAe,IACpB,OAAoB,EACpB,EAAE,MAAM,EAAwC;IAEhD,IAAI;QACF,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM;QACtB,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,QAAQ,KAAK,GAAG,CAAC,SAAS,aAAa,GAAG,CAAC,YAAY,OAAO,KAAK,gBAAgB;QACzF,MAAM,QAAQ,aAAa,GAAG,CAAC,YAAY;QAC3C,MAAM,SAAS,KAAK,GAAG,CAAC,SAAS,aAAa,GAAG,CAAC,aAAa,MAAM;QAErE,MAAM,WAAW,CAAC,YAAY,EAAE,IAAI,CAAC,EAAE,MAAM,CAAC,EAAE,MAAM,CAAC,EAAE,QAAQ;QACjE,MAAM,SAAS,iBAAiB;QAChC,IAAI,QAAQ;YACV,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAC3B;QAEA,MAAM,QAAQ,MAAM;QACpB,IAAI,CAAC,OAAO;YACV,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,OAAO;gBACP,QAAQ,EAAE;YACZ,GAAG;gBAAE,QAAQ;YAAI,IAAI,4CAA4C;QACnE;QAEA,MAAM,WAAW,MAAM,0LAAA,CAAA,UAAK,CAAC,GAAG,CAAC,0CAA0C;YACzE,SAAS;gBACP,eAAe,CAAC,OAAO,EAAE,OAAO;gBAChC,cAAc;YAChB;YACA,QAAQ;gBACN,aAAa,mBAAmB;gBAChC;gBACA;gBACA,MAAM,KAAK,KAAK,CAAC,SAAS,SAAS;YACrC;YACA,SAAS;QACX;QAEA,MAAM,OAAO,SAAS,IAAI,EAAE,QAAQ,EAAE;QACtC,MAAM,OAAO;YACX,SAAS;YACT,OAAO,KAAK,MAAM;YAClB,QAAQ,KAAK,GAAG,CAAC,CAAC,MAAa,CAAC;oBAC9B,IAAI,IAAI,EAAE;oBACV,OAAO,IAAI,KAAK,IAAI;oBACpB,MAAM;wBACJ,IAAI,IAAI,IAAI,EAAE;wBACd,IAAI,IAAI,IAAI,EAAE,MAAM,IAAI,IAAI,EAAE;oBAChC;oBACA,MAAM,IAAI,IAAI,IAAI,EAAE;oBACpB,UAAU,IAAI,QAAQ,IAAI;oBAC1B,WAAW,IAAI,IAAI,EAAE,aAAa,IAAI,IAAI,EAAE;gBAC9C,CAAC;YACD,UAAU,KAAK,MAAM,IAAI,QAAQ,GAAG,SAAS,OAAO,GAAG;QACzD;QAEA,aAAa,UAAU,MAAM,IAAI,KAAK,OAAO,kBAAkB;QAC/D,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAE3B,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,sBAAsB;YAClC,SAAS,MAAM,OAAO;YACtB,QAAQ,MAAM,QAAQ,EAAE;YACxB,MAAM,MAAM,QAAQ,EAAE;QACxB;QAEA,8CAA8C;QAC9C,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,OAAO;YACP,QAAQ,EAAE;YACV,OAAO;QACT,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}