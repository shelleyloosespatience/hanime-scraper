{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/impact/Documents/hanime-scraper/app/api/nsfw/proxy/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\n\nexport async function GET(request: NextRequest) {\n  const url = request.nextUrl.searchParams.get('url')\n  \n  if (!url) {\n    return NextResponse.json({ error: 'No URL provided' }, { status: 400 })\n  }\n\n  try {\n    console.log('Proxying URL:', url)\n    \n    // Important: Pass range headers for video streaming\n    const headers: HeadersInit = {\n      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n      'Referer': 'https://www.redgifs.com/',\n    }\n    \n    // Handle range requests for video seeking\n    const range = request.headers.get('range')\n    if (range) {\n      headers['Range'] = range\n    }\n\n    const response = await fetch(url, { headers })\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`)\n    }\n\n    // Create response headers\n    const responseHeaders = new Headers({\n      'Content-Type': response.headers.get('content-type') || 'video/mp4',\n      'Cache-Control': 'public, max-age=3600',\n      'Access-Control-Allow-Origin': '*',\n    })\n\n    // Pass through important headers for video streaming\n    const headersToPass = ['content-length', 'content-range', 'accept-ranges']\n    headersToPass.forEach(header => {\n      const value = response.headers.get(header)\n      if (value) {\n        responseHeaders.set(header, value)\n      }\n    })\n\n    // Return streamed response\n    return new NextResponse(response.body, {\n      status: response.status,\n      headers: responseHeaders,\n    })\n  } catch (error) {\n    console.error('Proxy error:', error)\n    return NextResponse.json(\n      { error: 'Failed to proxy video' },\n      { status: 500 }\n    )\n  }\n}"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,IAAI,OAAoB;IAC5C,MAAM,MAAM,QAAQ,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC;IAE7C,IAAI,CAAC,KAAK;QACR,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAkB,GAAG;YAAE,QAAQ;QAAI;IACvE;IAEA,IAAI;QACF,QAAQ,GAAG,CAAC,iBAAiB;QAE7B,oDAAoD;QACpD,MAAM,UAAuB;YAC3B,cAAc;YACd,WAAW;QACb;QAEA,0CAA0C;QAC1C,MAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC;QAClC,IAAI,OAAO;YACT,OAAO,CAAC,QAAQ,GAAG;QACrB;QAEA,MAAM,WAAW,MAAM,MAAM,KAAK;YAAE;QAAQ;QAE5C,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM,CAAC,oBAAoB,EAAE,SAAS,MAAM,EAAE;QAC1D;QAEA,0BAA0B;QAC1B,MAAM,kBAAkB,IAAI,QAAQ;YAClC,gBAAgB,SAAS,OAAO,CAAC,GAAG,CAAC,mBAAmB;YACxD,iBAAiB;YACjB,+BAA+B;QACjC;QAEA,qDAAqD;QACrD,MAAM,gBAAgB;YAAC;YAAkB;YAAiB;SAAgB;QAC1E,cAAc,OAAO,CAAC,CAAA;YACpB,MAAM,QAAQ,SAAS,OAAO,CAAC,GAAG,CAAC;YACnC,IAAI,OAAO;gBACT,gBAAgB,GAAG,CAAC,QAAQ;YAC9B;QACF;QAEA,2BAA2B;QAC3B,OAAO,IAAI,+PAAA,CAAA,eAAY,CAAC,SAAS,IAAI,EAAE;YACrC,QAAQ,SAAS,MAAM;YACvB,SAAS;QACX;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gBAAgB;QAC9B,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}